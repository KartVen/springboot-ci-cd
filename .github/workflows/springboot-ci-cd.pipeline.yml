name: MAIN - springboot-ci-cd Pipeline

env:
  IMAGE_NAME: "springboot-ci-cd"
  VPS_HOST: ${{ secrets.VPS_HOST }}
  VPS_USER: ${{ secrets.VPS_USER }}
  VPS_PRIVATE_KEY: ${{ secrets.VPS_PRIVATE_KEY }}
  DOCKER_NETWORK_NAME: ${{ secrets.DOCKER_NETWORK_NAME }}
  DOCKER_POSTGRESQL_CONTAINER_NAME: ${{ secrets.DOCKER_POSTGRESQL_CONTAINER_NAME }}
  SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
  SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
  SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}

on:
  push:
    branches:
      - main
    paths:
      - ./
  workflow_dispatch:
    inputs:
      version:
        description: 'New version (major.minor.patch)'
        required: true

jobs:
  compile:
    name: Compile $PACKAGE_NAME
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # all commits
      - uses: actions/setup-jdk@v4
        with:
          java-version: 17
          distribution: 'corretto'
      - name: ./gradlew clean build
        run: |
          ./gradlew clean build
  test:
    name: Test $PACKAGE_NAME
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # all commits
      - uses: actions/setup-jdk@v4
        with:
          java-version: 17
          distribution: 'corretto'
      - name: ./gradlew clean test
        run: |
          ./gradlew clean test
  build:
    name: Build $PACKAGE_NAME
    runs-on: self-hosted
    needs:
      - compile
      - test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # all commits
      - uses: actions/setup-jdk@v4
        with:
          java-version: 17
          distribution: 'corretto'
      - name: ./gradlew clean assemble
        run: |
          ./gradlew clean assemble
  build-image:
    name: Build image for $PACKAGE_NAME
    runs-on: self-hosted
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # all commits
      - uses: actions/setup-jdk@v4
        with:
          java-version: 17
          distribution: 'corretto'
      - name: compare commit
        id: git_diff
        run: |
          last_commit=$(git rev-parse HEAD^1)
          current_commit=$(git rev-parse HEAD)
          git diff --quiet $last_commit $current_commit || echo 1;
      - name: create github tag
        if: steps.git_diff.outputs.diff == '1'
        run: |
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          echo "Version tag: $VERSION"
          git tag "v$VERSION"
          git push origin "v$VERSION"
      - name: build image
        uses: appleboy/ssh-action@master
        with:
          host: $VPS_HOST
          username: $VPS_USER
          key: $VPS_PRIVATE_KEY
          port: 22
          script: |
            mkdir -p /tmp/$PACKAGE_NAME
            cp -r $GITHUB_WORKSPACE/* /tmp/$PACKAGE_NAME/
            
            cd /tmp/$PACKAGE_NAME
            docker build -t $PACKAGE_NAME:$VERSION .
            
            IMAGE_ID=$(docker images -q $PACKAGE_NAME:$VERSION)
            if [ -z "$IMAGE_ID" ]; then
              echo "Error: Docker image $PACKAGE_NAME:$VERSION was not created."
              exit 1
            fi
  deploy:
    name: Deploy $PACKAGE_NAME
    runs-on: self-hosted
    needs:
      - build-image
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # all commits
      - name: deploy $PACKAGE_NAME
        uses: appleboy/ssh-action@master
        with:
          host: $VPS_HOST
          username: $VPS_USER
          key: $VPS_PRIVATE_KEY
          port: 22
          script: |
            # check network
            docker network inspect $DOCKER_NETWORK_NAME > /dev/null 2>&1 || exit 1

            # check PostgreSQL service
            docker exec -t $DOCKER_POSTGRESQL_CONTAINER_NAME pg_isready -U $SPRING_DATASOURCE_USERNAME \
              > /dev/null 2>&1 || exit 1
            
            CONTAINER_NAME="$PACKAGE_NAME-$VERSION"
            docker ps -q -f name=$CONTAINER_NAME | grep -q . && docker stop --rm $CONTAINER_NAME

            docker run -d \
              --name $CONTAINER_NAME \
              --network $DOCKER_NETWORK_NAME \
              -e SPRING_DATASOURCE_URL=$SPRING_DATASOURCE_URL \
              -e SPRING_DATASOURCE_USERNAME=$SPRING_DATASOURCE_USERNAME \
              -e SPRING_DATASOURCE_PASSWORD=$SPRING_DATASOURCE_PASSWORD \
              $PACKAGE_NAME:$VERSION || exit 1
