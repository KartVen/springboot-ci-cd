name: springboot-ci-cd_main

env:
  APP_NAME: springboot-ci-cd
  VERSION: ${{ github.event.inputs.version }}
  WORKING_DIRECTORY: ./
  NETWORK_NAME: ${{ secrets.NETWORK_NAME }}
  DATASOURCE_CONTAINER: postgres
  DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
  DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
  DATASOURCE_DATABASE: ${{ secrets.DATASOURCE_DATABASE }}
  DATASOURCE_SCHEMA: spring_app
  EXPOSE_PORT: ${{ secrets.EXPOSE_PORT }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Deploy tag (ex. v1.0.0, v1.0.0-dev)'
        required: true

jobs:
  prepare:
    name: Prepare
    runs-on: self-hosted
    steps:
      - name: Check environment variables
        run: |
          REQUIRED_VARS=\
          (

          )
          EXIT=0
          for VAR in "${REQUIRED_VARS[@]}"; do
            [ -z "${!VAR}" ] && echo "Environment variable $VAR is missing." && EXIT=1
          done
          exit $EXIT
  build-and-test:
    name: Build & Test
    runs-on: self-hosted
    needs: [ prepare ]
    steps:
      - name: git checkout ${{ env.VERSION }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # all commits
          ref: ${{ env.VERSION }}
      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'
          cache: gradle
      - name: Set working directory
        run: |
          cd $WORKING_DIRECTORY
      - name: Make gradlew executable
        run: |
          chmod +x ./gradlew
      - name: ./gradlew clean assemble test
        run: |
          ./gradlew clean assemble test
  build-image:
    name: Build image
    runs-on: self-hosted
    needs: [ build-and-test ]
    steps:
      - name: Build
        run: |
          docker build -t $APP_NAME:$VERSION .
      - name: Verify
        run: |
          docker images -q $APP_NAME:$VERSION  || { echo "Image $APP_NAME:$VERSION was not created."; exit 1; }
  prepare-deploy:
    name: Prepare deploy
    runs-on: self-hosted
    needs: [ build-image ]
    steps:
      - name: Validate network
        run: |
          docker network inspect $NETWORK_NAME > /dev/null 2>&1 \
             || { echo "Network $NETWORK_NAME is not available."; exit 1; }
      - name: Validate database - container
        run: |
          docker exec -t $DATASOURCE_CONTAINER pg_isready \
            || { echo "PostgreSQL is not running."; exit 1; }
      - name: Validate database - database
        if: success()
        run: |
          docker exec -t $DATASOURCE_CONTAINER psql -lqt -U $DATASOURCE_USERNAME | grep -q $DATASOURCE_DATABASE \
            || { echo "Database $DATASOURCE_DATABASE does not exist."; exit 1; }
      - name: Validate database - schema
        if: success()
        run: |
          docker exec -t $DATASOURCE_CONTAINER psql \
            -U $DATASOURCE_USERNAME \
            -d $DATASOURCE_DATABASE \
            -tAc "SELECT 1 FROM information_schema.schemata WHERE schema_name = '$DATASOURCE_SCHEMA'" \
            | grep -q 1 || { echo "Schema $DATASOURCE_SCHEMA does not exist."; exit 1; }
  deploy:
    name: Deploy
    runs-on: self-hosted
    needs: [ prepare-deploy ]
    steps:
      - name: Save current stack
        run: |
          echo "PREVIOUS_IMAGE_ID=$(docker ps -aq --filter name=$APP_NAME --format "{{.Image}}")" >> $GITHUB_ENV
      - name: Stop
        if: success()
        run: |
          [ -n "$PREVIOUS_IMAGE" ] && docker stop $APP_NAME \
            || echo "No existing container to stop."
      - name: Prepare temp environment
        if: success()
        run: |
          echo "SPRING_DATASOURCE_URL=jdbc:postgresql://$DATASOURCE_CONTAINER/$DATASOURCE_DATABASE?currentSchema=$DATASOURCE_SCHEMA" >> $GITHUB_ENV
      - name: Run
        id: run
        if: success()
        run: |
          docker run -d \
            --name $APP_NAME \
            --network $NETWORK_NAME \
            -e SPRING_DATASOURCE_URL=$SPRING_DATASOURCE_URL \
            -e SPRING_DATASOURCE_USERNAME=$DATASOURCE_USERNAME \
            -e SPRING_DATASOURCE_PASSWORD=$DATASOURCE_PASSWORD \
            -p $EXPOSE_PORT:8080 \
            $APP_NAME:$VERSION \
            || { echo "Failed to start container $APP_NAME"; exit 1; }
      - name: Revert app
        if: failure()
        run: |
          docker start $APP_NAME || { echo "Failed to restore container $APP_NAME"; exit 1; }
  clean-up:
    name: Clean up
    runs-on: self-hosted
    needs: [ deploy ]
    steps:
      - name: Remove previous image
        run: |
          [ "$PREVIOUS_IMAGE_ID" != "$(docker images -q $APP_NAME:$VERSION)" ] && docker rmi $PREVIOUS_IMAGE_ID \
            || echo "Failed to remove previous image."